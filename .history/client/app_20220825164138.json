{
  /**
     * The application's namespace.
     */
  "name": "App",
  /**
     * The version of the application.
     */
  "version": "1.0.0.0",
  /**
     * The relative path to the application's markup file (html, jsp, asp, etc.).
     */
  "indexHtmlPath": "index.html",
  /**
     * Comma-separated string with the paths of directories or files to search. Any classes
     * declared in these locations will be available in your class "requires" or in calls
     * to "Ext.require". The "app.dir" variable below is expanded to the path where the
     * application resides (the same folder in which this file is located).
     */
  "classpath": [
    "app"
  ],
  /**
     * Comma-separated string with the paths of directories or files to search. Any classes
     * declared in these locations will be automatically required and included in the build.
     * If any file defines an Ext JS override (using Ext.define with an "override" property),
     * that override will in fact only be included in the build if the target class specified
     * in the "override" property is also included.
     */
  "overrides": [
    "overrides"
  ],
  /**
     * The Sencha Framework for this application: "ext" or "touch".
     */
  "framework": "ext",
  /**
     * The toolkit to use. Select either "classic" or "modern".
     */
  "toolkit": "modern",
  /**
     * The name of the theme for this application.
     */
  "theme": "coworkee",
  /**
     * The list of required packages (with optional versions; default is "latest").
     *
     * For example,
     *
     *      "requires": [
     *          "charts"
     *      ]
     */
  "requires": [
    "font-awesome",
    "google"
  ],
  "mashup": {
    "map": {
      /**
             * Use your own Google Maps API key by modifying the following options,
             * for example: "options": "?v=3&key=google_maps_api_key". The key can
             * be generated from the Google API Console.
             * https://console.developers.google.com/apis/credentials)
             */
      "options": "?v=3"
    },
    /**
         * If the app runs inside Cordova, '//foo.bar' urls are resolved as 'file://foo.bar'.
         * Uncomment the following lines to enforce required scripts to use HTTPS instead.
         * https://github.com/sencha-extjs-examples/Coworkee/issues/4
         */
    "redirect": {
      "//maps.googleapis.com/maps/api/js{options}": "https://maps.googleapis.com/maps/api/js{options}"
    }
  },
  /**
     * Fashion build configuration properties.
     */
  "fashion": {
    "inliner": {
      /**
             * Disable resource inliner. Production builds enable this by default.
             */
      "enable": false
    }
  },
  /**
     * Sass configuration properties.
     */
  "sass": {
    /**
         * The root namespace to use when mapping *.scss files to classes in the
         * sass/src and sass/var directories. For example, "App.view.Foo" would
         * map to "sass/src/view/Foo.scss". If we changed this to "App.view" then
         * it would map to "sass/src/Foo.scss". To style classes outside the app's
         * root namespace, change this to "". Doing so would change the mapping of
         * "App.view.Foo" to "sass/src/App/view/Foo.scss".
         */
    "namespace": "App",
    /**
         * Generated sass source settings
         *
         *      "generated": {
         *         // The file used to save sass variables edited via Sencha Inspector and Sencha Themer.
         *         // This file will automatically be applied to the end of the scss build.
         *         "var": "sass/save.scss",
         *
         *         // The directory used to save generated sass sources.
         *         // This directory will automatically be applied to the end of the scss build.
         *         "src": "sass/save"
         *      }
         *
         */
    "generated": {
      "var": "sass/save.scss",
      "src": "sass/save"
    },
    /**
         * Comma-separated list of files or folders containing extra Sass. These
         * files are automatically included in the Sass compilation. By default this
         * is just "etc/all.scss" to allow import directives to control the order
         * other files are included.
         *
         * All "etc" files are included at the top of the Sass compilation in their
         * dependency order:
         *
         *      +-------+---------+
         *      |       | base    |
         *      | theme +---------+
         *      |       | derived |
         *      +-------+---------+
         *      | packages        |  (in package dependency order)
         *      +-----------------+
         *      | application     |
         *      +-----------------+
         */
    "etc": [
      "sass/etc/all.scss"
    ],
    /**
         * Comma-separated list of folders containing Sass variable definitions
         * files. These file can also define Sass mixins for use by components.
         *
         * All "var" files are included after "etc" files in the Sass compilation in
         * dependency order:
         *
         *      +-------+---------+
         *      |       | base    |
         *      | theme +---------+
         *      |       | derived |
         *      +-------+---------+
         *      | packages        |  (in package dependency order)
         *      +-----------------+
         *      | application     |
         *      +-----------------+
         *
         * The "sass/var/all.scss" file is always included at the start of the var
         * block before any files associated with JavaScript classes.
         */
    "var": [
      "sass/var/all.scss",
      "sass/var"
    ],
    /**
         * Comma-separated list of folders containing Sass rule files.
         *
         * All "src" files are included after "var" files in the Sass compilation in
         * dependency order (the same order as "etc"):
         *
         *      +-------+---------+
         *      |       | base    |
         *      | theme +---------+
         *      |       | derived |
         *      +-------+---------+
         *      | packages        |  (in package dependency order)
         *      +-----------------+
         *      | application     |
         *      +-----------------+
         */
    "src": [
      "sass/src"
    ]
  },
  /**
     * List of all JavaScript assets in the right execution order.
     *
     * Each item is an object with the following format:
     *
     *      {
     *          // Path to file. If the file is local this must be a relative path from
     *          // this app.json file.
     *          //
     *          "path": "path/to/script.js",   // REQUIRED
     *
     *          // Set to true on one file to indicate that it should become the container
     *          // for the concatenated classes.
     *          //
     *          "bundle": false,    // OPTIONAL
     *
     *          // Set to true to include this file in the concatenated classes.
     *          //
     *          "includeInBundle": false,  // OPTIONAL
     *
     *          // Specify as true if this file is remote and should not be copied into the
     *          // build folder. Defaults to false for a local file which will be copied.
     *          //
     *          "remote": false,    // OPTIONAL
     *
     *          // If not specified, this file will only be loaded once, and cached inside
     *          // localStorage until this value is changed. You can specify:
     *          //
     *          //   - "delta" to enable over-the-air delta update for this file
     *          //   - "full" means full update will be made when this file changes
     *          //
     *          "update": "",        // OPTIONAL
     *
     *          // A value of true indicates that is a development mode only dependency.
     *          // These files will not be copied into the build directory or referenced
     *          // in the generate app.json manifest for the micro loader.
     *          //
     *          "bootstrap": false   // OPTIONAL
     *      }
     *
     */
  "js": [
    {
      "path": "app.js",
      "bundle": true
    },
    {
      /**
             * Ext.Direct API URL: if the app runs inside Cordova, you will need to change
             * the path to the absolute endpoint (e.g. https://192.168.1.2:3000/api/).
             */
      "path": "api/",
      "remote": true
    }
  ],
  /**
     * List of all CSS assets in the right inclusion order.
     *
     * Each item is an object with the following format:
     *
     *      {
     *          // Path to file. If the file is local this must be a relative path from
     *          // this app.json file.
     *          //
     *          "path": "path/to/stylesheet.css",   // REQUIRED
     *
     *          // Specify as true if this file is remote and should not be copied into the
     *          // build folder. Defaults to false for a local file which will be copied.
     *          //
     *          "remote": false,    // OPTIONAL
     *
     *          // If not specified, this file will only be loaded once, and cached inside
     *          // localStorage until this value is changed. You can specify:
     *          //
     *          //   - "delta" to enable over-the-air delta update for this file
     *          //   - "full" means full update will be made when this file changes
     *          //
     *          "update": ""      // OPTIONAL
     *      }
     */
  "css": [
    {
      // this entry uses an ant variable that is the calculated
      // value of the generated output css file for the app,
      // defined in .sencha/app/defaults.properties
      "path": "${build.out.css.path}",
      "bundle": true,
      "exclude": [
        "fashion"
      ]
    }
  ],
  /**
     * This option is used to configure the dynamic loader. At present these options
     * are supported.
     *
     */
  "loader": {
  
    "cache": false,

    "cacheParam": "_dc"
  },

  "production": {
    "output": {
      "appCache": {
        "enable": true,
        "path": "cache.appcache"
      }
    },
    "loader": {
      "cache": "${build.timestamp}"
    },
    "cache": {
      "enable": true
    },
    "compressor": {
      "type": "yui"
    }
  },

  "testing": {},

  "development": {
    "watch": {
      "delay": 250
    }
  },

  "bootstrap": {
    "base": "${app.dir}",
    "microloader": "bootstrap.js",
    "css": "bootstrap.css"
  },

  "output": {
    "base": "${workspace.build.dir}/${build.environment}/${app.name}",
    "appCache": {
      "enable": false
    }
  },

  "cache": {
    "enable": false,
    "deltas": true
  },

  "appCache": {

    "cache": [
      "index.html"
    ],

    "network": [
      "*"
    ],

    "fallback": []
  },

  "resources": [
    {
      "path": "resources",
      "output": "shared"
    }
  ],

  "archivePath": "archive",
  "slicer": null,
 
  "ignore": [
    "(^|/)CVS(/?$|/.*?$)"
  ],

  "id": "57beb200-5617-4821-9819-6d7e3a39bf66"
}